#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <sstream>
#include <vector>

#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include "shader.h"

#include "Matrix.h"
#include "Vector.h"

void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    //std::cout << "Window Resized" << std::endl;
    glViewport(0, 0, width, height);
}

void processInput(GLFWwindow *window);

int main(void)
{
    GLFWwindow* window;

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(800, 600, "Hello World", NULL, NULL);
    if (!window)
    {  
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }

    if (!window)
    {  
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }

    // Tell opengl size of render window 
    glViewport(0, 0, 800, 600);
        //can be set to lower than window
        //all opengl renders would be displated in a smaller window and other elements ould be added outside of this

    //update viewport on window resize
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);


    /* Make the window's context current */
    glfwMakeContextCurrent(window);

    /* Loop until the user closes the window */
    while (!glfwWindowShouldClose(window)) //check if glfw window has been closed
    {
        processInput(window);
        /* Render here */
        glClearColor(0.485f, 0.592f, 0.767f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);
        
        float vertices[] = {
        -0.5f, -0.5f, 0.0f,
        0.5f, -0.5f, 0.0f,
        0.0f, 0.5f, 0.0f
        };
    
    //vertex buffer object
        unsigned int VBO;
        std::cout << "1==========================" << std::endl;
        glGenBuffers(1, &VBO);
        std::cout << "2==========================" << std::endl;
        glBindBuffer(GL_ARRAY_BUFFER, VBO); 
        std::cout << "3==========================" << std::endl;
            // VBO is of type GL_ARRAY_BUFFER
            //Can only bind one type at a time 

        //Since buffer is now bound we can load vertices into it
        glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
            //glBufferData -> copies user data into currently bound buffers 

        //====
        // Vertex data is now within GPU memory managed by VBO
        // Next we want to create a vertex and fragment shader 
        //====

            //Here we compile and load the shaders. First we pass the vertex shader then the fragment shader.
        GLuint programID = LoadShaders("vertex.glsl", "fragment.glsl");
        
        //Define how OpenGL should intepret vector data
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
        glEnableVertexAttribArray(0);

        //Use shader program to render an object
        glUseProgram(programID);
        
        //Note: We'd have to repeat this process everytime we'd want to draw
        //This can be cumbersome, thus use a VAO
        //subsequent vertex attribute calls from that point will bue stored inside the VAO
        unsigned int VAO;
        glGenVertexArrays(1, &VAO);
        glBindVertexArray(VAO);

        //code to draw object 
        glDrawArrays(GL_TRIANGLES, 0, 3);
    
        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();
    }

    //when glfw window closes termincate program
    glfwTerminate();
    return 0;
}

void processInput(GLFWwindow *window)
{
    if(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
}