--------------------------------------------------------------------------------------------------------------------
Commands
--------

Install (unix)
- curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

Install rustup:
- sudo pacman -S rustup

Open Book:
- rustup doc --book

Creating a cargo project:
- cargo new proj_name //Create a new dir with name proj_name with src folder and toml

Building With cargo:
// cd into proj_name
- cargo build
    // new dir with exec file: target/debug/exec
- ./target/debug/proj_name to run
    OR

Check for errors b4 compiling:
- cargo check

Build and Run:
- cargo run 

Build for release:
- cargo build -release 
    //build with optimizations in release folder

Update packages:
- cargo update 
    //will ignore lock file

Opening docs for a proj:
- cargo doc --open


Add a new library crate:
- cargo new lib_name --lib


IF NO SQUIGGLES:
- rustup component add rust-analysis --toolchain stable-x86_64-unknown-linux-gnu
- rustup component add rust-src --toolchain stable-x86_64-unknown-linux-gnu
- rustup component add rls --toolchain stable-x86_64-unknown-linux-gnu
<https://github.com/rust-lang/vscode-rust/issues/835#issuecomment-725426724>

--------------------------------------------------------------------------------------------------------------------
Cargo
-----

Cargo -> Build System
    Manages building, crate downloads, crate building etc 
    Expects source code to be ion src folder,
    top dir for readme, license etc...
Cargo commands are not os dependent 

--Prelude
-> Automatic Imports: file:///home/Dragon/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/share/doc/rust/html/std/prelude/index.html


--Crates
-> Modify carg.toml to include source code from external Crates
e.g randoom func:
    [dependencies]
    rand = "0.8.5"

Lock file saves current version of crates

--------------------------------------------------------------------------------------------------------------------
Statements vs Expressions 
-------------------------
Function bodies are made up of a series of Statements

Statement: Instructions that perform and action and don't return a value
Expression: Evaluate to a resultant value
    i.e> can appear on rhs (kinda)

let x = 0; -> Statement
x = y = 6 not valid in Rust
    Since let y = 6 does not return anything (Statement)
    x has nothing to bind to

5 + 6; -> Expression
    Evaluates to some value
{Code} is an expression
    let x = {let y = 4; y + 1};
    Is valid
Expressions DON'T end with ;
if you add a ';' it becomes a statement

--------------------------------------------------------------------------------------------------------------------
Ownership
---------
-> Set of rules that govern memory management 

HeapStack
    When your code calls a function, the values passed into the function (including, potentially, pointers to data on the heap) 
    and the function’s local variables get pushed onto the stack. When the function is over, those values get popped off the stack.
    -> Reason for stack alignment in asm

Rules:
    - Each value must have an owner.
    - There can only be one owner at a time.
    - When the owner goes out of scope, the value will be dropped.

Note: Rust always makes shallow copies (moves)

NOTE:
    let x = 5;
    let mut y = x;
    y = y + 3;
    println!("x = {x}, y = {y}");
Seems to violate the move principle
This principle only aplies to objects with heap allocation
Since from a processing pov a deep copy and shallow would cost the same

Objects (which go on the stack) that implement the Copy trait
always copy and don't move when assigned (still valid after assignment used)

If the Drop trait is implemented, then Copy can't be used

Variables passed into a function will move or copy (same as assignment)

fn main() {
    let s = String::from("hello");  // s comes into scope
    takes_ownership(s);             // s's value moves into the function...
                                    // ... and so is no longer valid here

    let x = 5;                      // x comes into scope

    makes_copy(x);                  // x would move into the function,
                                    // but i32 is Copy, so it's okay to still
                                    // use x afterward

    let s2 = String::from("hello");     // s2 comes into scope

    let s3 = takes_and_gives_back(s2);  // s2 is moved into
                                        // takes_and_gives_back, which also
                                        // moves its return value into s3
} // Here, s3 goes out of scope and is dropped. s2 was moved, so nothing
  // happens. s1 goes out of scope and is dropped.
s2 moved to s3


Using s after calling takes_ownership will produce an error

---------
Refrences and Borrowing

-> Needing to return back a value each time if used in a function is tedious, esp with multiple args
then need to use a return tuple

This can be avoided with Ref and Borrowing

Refrence: Pass on data owned by another object to the function
(similar to a ptr, but a ref is always guranteed to point to a valid value, not null)


When passing a mutable reference, the function can only take a single reference to any value:
    let r1 = &mut s;
    let r2 = &mut s;
    println!("{}, {}", r1, r2);
Double mutable borrow not allowed
Not valid

Also not valid:
    let mut s = String::from("hello");

    let r1 = &s; // no problem
    let r2 = &s; // no problem
    let r3 = &mut s; // BIG PROBLEM

    println!("{}, {}, and {}", r1, r2, r3);
Can't have a mutable and non mutable reference to a value at the same time
"Users of an immutable reference don’t expect the value to suddenly change out from under them! However, 
multiple immutable references are allowed because no one who is just reading the data has the ability to affect anyone else’s reading of the data."

This is valid
    let mut s = String::from("hello");

    let r1 = &s; // no problem
    let r2 = &s; // no problem
    println!("{r1} and {r2}");
    // variables r1 and r2 will not be used after this point

    //r1 and r2 not used after this, thus out of scope (done at compile time)

    let r3 = &mut s; // no problem
    println!("{r3}");

fn dangle() -> &String { // dangle returns a reference to a String

    let s = String::from("hello"); // s is a new String

    &s // we return a reference to the String, s
} // Here, s goes out of scope, and is dropped. Its memory goes away.
  // Danger!

The solution here is to return the String directly:

fn no_dangle() -> String {
    let s = String::from("hello");

    s
}


The Rules of References:
    - At any given time, you can have either one mutable reference or any number of immutable references.
    - References must always be valid.


-----
Slice Type

Slice -> allows us to reference a contigious sequence of elements in a collection
    Does not have owernership (like a reference)

    returns a string literal from index 10 till end
&s[10..s.len()]

The concepts of ownership, borrowing, and slices ensure memory safety in Rust programs at compile time. 
The Rust language gives you control over your memory usage in the same way as other systems programming languages, 
but having the owner of data automatically clean up that data when the owner goes out of scope 
means you don’t have to write and debug extra code to get this control.

--------------------------------------------------------------------------------------------------------------------
Structs
---------
    struct STRCT{
        key: value,
    }

    let mut s1: STRCT =  {key: ActualValue} 
//Can't have individual mutable fields 

Short hand
    fn make_monster(hp: i32, mp: i32, lvl: i32) -> Entity{
    Entity{
        username: String::from("Monster"),
        hp, mp, lvl
        }
    }

Copy:
    let user2 = User {
        email: String::from("another@example.com"),
        ..user1 //fills rem fields to match user 1
    };

Tupple Structs

    struct Color(i32, i32, i32);
    struct Point(i32, i32, i32);

    fn main() {
        let black = Color(0, 0, 0);
        let origin = Point(0, 0, 0);
    }

Structs: Grouping of related fields with implementation
    #[derive(Debug)]
    struct Rectangle{
        width: u32,
        height: u32
    }

    impl Rectangle{
        fn area(&self) -> u32{ //&mut self and self also allowed, self will take ownership
            self.width * self.height
        }

        fn can_hold(&self, rect2: &Rectangle) -> bool{
            //Expression lanfuages are cool :3
            self.height > rect2.height && self.width > rect2.width
        }

        //Helpers / constructors
        fn square(size: u32) -> Self{ //Can go in another impl block if needed
            Self{
                width: size,
                height: size
            }
        }
    }


--------------------------------------------------------------------------------------------------------------------
Enums
-----

-> Value is part of a set of values

define an enum with possible values.
funtions can now take in a enum irrelevalnt of value assign

Data can be plaes into enum variants:
    enum IpAddr {
        V4(String),
        V6(String),
    }

Options:
    let _some_number: Option<i32> = Some(5);
        //Only form of null in rust
    let _absent_number: Option<i32> = None;
Null is an opt in
Nulls can only occur under data types defined withn option
i.e) If you don't see Option<T> you can assume the value is not null
->file:///home/Dragon/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/share/doc/rust/html/std/option/enum.Option.html

---
Matching
    enum Coin {
        Penny,
        Nickel,
        Dime,
        Quarter,
    }

    fn _value_in_cents(coin: Coin) -> u8 {
        match coin {
            Coin::Penny => 1,
            Coin::Nickel => 5,
            Coin::Dime => 10,
            Coin::Quarter(state) =>{println!("State -> {state:?}"); 25}
        }
    }

    #[derive(Debug)] // so we can inspect the state in a minute
    enum UsState {
        Alabama,
        Alaska
    }



    {} -> arms consist of pattern and some code
    Pattern => code to run

We use matching to extract a value out of an enum

Matching with options:
match against an enum (options), bind a variable to the data inside, and then execute code based on it. 

Note: Matches are exhaustive, must have all possible patterns


---
Catch all patterns and _ Placeholder

    let dice_roll = some number;
    
    match dice_roll {
        3 => add_fancy_hat(),
        7 => remove_fancy_hat(),
        other => move_player(other),
    }
Requirement for exhaustion met
    -> catch all arm must come at end (goes in order)
    other can also be "_"
        -> _ matches and does not bind

    _ => ()
    is valid -> nothing happens

---
If let
    The syntax if let takes a pattern and an expression separated by an equal sign.
    It works the same way as a match, where the expression is given to the match and the pattern is its first arm.

    Using if let means less typing, less indentation, and less boilerplate code. However, 
    you lose the exhaustive checking that match enforces. 
    Choosing between match and if let depends on what you’re doing in your particular situation 
    and whether gaining conciseness is an appropriate trade-off for losing exhaustive checking.

    let mut count = 0;
    match coin {
        Coin::Quarter(state) => println!("State quarter from {state:?}!"),
        _ => count += 1,
    }


    let mut count = 0;
    if let Coin::Quarter(state) = coin {
        println!("State quarter from {state:?}!");
    } else {
        count += 1;
    }

--------------------------------------------------------------------------------------------------------------------
Project Management
------------------
    - Packages: A Cargo feature that lets you build, test, and share crates
    - Crates: A tree of modules that produces a library or executable
    - Modules and use: Let you control the organization, scope, and privacy of paths
    - Paths: A way of naming an item, such as a struct, function, or module

------
Packages and crates

Crate-> smallest amount of code the rust compiler considers at a time
 - Source files are considered to be crates aswell

 crates can contain modules

 Crate types:
 - Binary Crate: can compile to executable with main function
 - Library Crate: don't have a main (library)

 Package -> Bundle of crates

 --
 src/main.rs is the crate root of a binary crate with the same name as the package


 ---
 Defining Modules to Control Scope and Privacy

 
    Start from the crate root: When compiling a crate, the compiler first looks in the crate root file 
    (usually src/lib.rs for a library crate or src/main.rs for a binary crate) for code to compile.

    Declaring modules: 
        In the crate root file, you can declare new modules; say you declare a “garden” module with mod garden;. 
        The compiler will look for the module’s code in these places:
        Inline, within curly brackets that replace the semicolon following mod garden
        In the file src/garden.rs
        In the file src/garden/mod.rs

    Declaring submodules: In any file other than the crate root, you can declare submodules. For example, you might declare mod vegetables; in src/garden.rs. The compiler will look for the submodule’s code within the directory named for the parent module in these places:
        Inline, directly following mod vegetables, within curly brackets instead of the semicolon
        In the file src/garden/vegetables.rs
        In the file src/garden/vegetables/mod.rs

    Paths to code in modules: 
        Once a module is part of your crate, you can refer to code in that module from anywhere else in that same crate, 
        as long as the privacy rules allow, using the path to the code. For example, an Asparagus type in the garden vegetables 
        module would be found at crate::garden::vegetables::Asparagus.

    Private vs. public: 
        Code within a module is private from its parent modules by default. 
        To make a module public, declare it with pub mod instead of mod. 
        To make items within a public module public as well, use pub before their declarations.

    The use keyword: 
    Within a scope, the use keyword creates shortcuts to items to reduce repetition of long paths. 
    In any scope that can refer to crate::garden::vegetables::Asparagus, 
    you can create a shortcut with use crate::garden::vegetables::Asparagus; 
    and from then on you only need to write Asparagus to make use of that type in the scope.

backyard
├── Cargo.lock
├── Cargo.toml
└── src
    ├── garden
    │   └── vegetables.rs
    ├── garden.rs
    └── main.rs

use crate::garden::vegetables::Asparagus;

pub mod garden;

fn main() {
    let plant = Asparagus {};
    println!("I'm growing {plant:?}!");
}


Code in modules are private by default

---
A path can take two forms:

    An absolute path is the full path starting from a crate root; for code from an external crate, the absolute path begins with the crate name, and for code from the current crate, it starts with the literal crate.
    A relative path starts from the current module and uses self, super, or an identifier in the current module.


In Rust, all items (functions, methods, structs, enums, modules, and constants) are private to parent modules by default. 
If you want to make an item like a function or struct private, you put it in a module.

Note: Parents can't use child data but children can use ancestral data
i.e) Inner implementation details are hidden by default
Inner methods can be exposed with "pub" keyword

super -> Begins in parent module (..)

Structs in mods:
Will become public if desendant is public (but not the fields which are done individually)
    also need a constructor function to make object of the struct type

Enums in mods:
If public then all variants are also public

Using mods:
    After being brought into scope functions still need to be specified with parent module
    to show that the function is not locally defined 
    (not the case for structs and enums, only the constructor function)
    ->Allows us to have functions with the same signature in two diff modules

as Keywords: allows aliasing of modules
    use std::fmt::Result;
    use std::io::Result as IoResult;

    fn function1() -> Result {
        // --snip--
    }

    fn function2() -> IoResult<()> {
        // --snip--
    }

Re-exporting:
    mod front_of_house {
        pub mod hosting {
            pub fn add_to_waitlist() {}
        }
    }

    pub use crate::front_of_house::hosting;

    pub fn eat_at_restaurant() {
        hosting::add_to_waitlist();
    }

Path nesting:
    // --snip--
    use std::cmp::Ordering;
    use std::io;
    // --snip--
Becomes
    // --snip--
    use std::{cmp::Ordering, io};
    // --snip--

    use std::io;
    use std::io::Write;
Becomes
    use std::io::{self, Write};

Global:
    use std::collections::*;
